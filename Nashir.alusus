import "Srl/Net.alusus";
import "Srl/Console.alusus";
import "Srl/System.alusus";
import "Srl/Fs.alusus";
import "Build";
import "Apm";
Apm.importFile("Alusus/ExtendedNet");
Apm.importFile("Alusus/Json");
Apm.importFile("Alusus/Crypto");
Apm.importFile("Alusus/I18n");

import "Drivers/Driver";

@merge module Nashir {
    use Srl;

    def verbose: Bool(false);
    def myWorkDir: String;
    def assets: Array[String];
    def dependencies: Array[String];
    def driver: SrdRef[Driver];

    macro handleUnexpectedCommunicationError {
        Console.print(I18n.string("Unexpected communication error! Retry? "));
        if getUserYesNoAnswer(String()) != "yes" {
            System.exit(1);
        }
    }

    func getUserYesNoAnswer(prompt: String): String {
        return getUserMultipleOptionsAnswer(prompt, Map[String, String]()
            .set(String("yes"), String("yes"))
            .set(String("y"), String("yes"))
            .set(String("no"), String("no"))
            .set(String("n"), String("no"))
        );
    }

    func getUserMultipleOptionsAnswer(prompt: String, options: Map[String, String]): String {
        def ret: String;
        while 1 {
            if prompt != "" Console.print(prompt);
            def answer: array[Char, 100];
            Console.getString(answer~ptr, 100);
            ret = I18n.string(answer~ptr).toLowerCase();
            if options.findPos(ret) == -1 {
                Console.print(I18n.string("Invalid entry.\n"));
                continue;
            }
            ret = options(ret);
            break;
        }
        return ret;
    }

    func getUserTextAnswer(prompt: String, allowEmpty: Bool): String {
        def result: String;
        while 1 {
            if prompt != "" Console.print(prompt);
            def answer: array[Char, 1024];
            Console.getString(answer~ptr, 1024);
            result = String(answer~ptr).trim();
            if result != "" or allowEmpty break;
            Console.print(I18n.string("Invalid entry.\n"));
        }
        return result;
    }

    func publish() {
        def fp: ptr[Fs.File] = Fs.openProcess("pwd", "r");
        def path: array[char, 1035];
        Fs.readLine(path~ptr, 1035, fp);
        Fs.closeProcess(fp);
        myWorkDir = String(path~ptr);
        // Remove the \n from the end of the string.
        myWorkDir = myWorkDir.slice(0, myWorkDir.getLength() - 1);
        driver.publish();
    }

    func build [start: ast_ref] () {
        def i: Int;
        for i = 0, i < assets.getLength(), ++i {
            System.exec(String.format("cp -r \"%s\" Build/", assets(i).buf));
        }
        def exe: Build.Exe(start~ast، String("Build/start"));
        exe.addDependencies(dependencies);
        if exe.generate() {
            Console.print(I18n.string("Build complete.\n"));
        } else {
            System.fail(1، I18n.string("Build failed."));
        }
    }

    macro createStartExe[name, startJit] {
        @expname[main]
        func name (argCount: Int، args: ptr[array[CharsPtr]]): Int {
            mainAssetsPath = "Assets/";
            uiEndpointsPath = "UiEndpoints/";

            startJit();
            return 0;
        }
    }

    macro initialize[driverInit] {
        Srl.System.exec("mkdir -p Build");
        Srl.System.exec("rm -rf Build/*");
        WebPlatform.mainAssetsPath = "Build/Assets/";
        WebPlatform.uiEndpointsPath = "Build/UiEndpoints/";
        Nashir.driver = driverInit;
    }

    macro startup[startExe, startJit] {
        if Process.argCount == 3 {
            def arg: CharsPtr = Process.args~cnt(Process.argCount - 1);
            if I18n.string(arg) == "build" {
                Nashir.build[startExe]();
            } else if I18n.string(arg) == "publish" {
                Nashir.build[startExe]();
                Nashir.publish();
            } else {
                Console.print(I18n.string(
                    "Error: Invalid argument\n"
                    "Usage:\n"
                    "  alusus <main_alusus_file> [build|publish]\n"
                ));
            }
        } else {
            startJit();
        }
    }

    macro startup[start] {
        Nashir.createStartExe[_main, start];
        Nashir.startup[_main, start];
    }
}
