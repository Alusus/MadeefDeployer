import "Srl/Net.alusus";
import "Srl/Console.alusus";
import "Srl/System.alusus";
import "Srl/Fs.alusus";
import "Apm";
Apm.importFile("Alusus/ExtendedNet");
use Srl;

module Nashir {
    def HOST: "http://localhost:8010";
    def CREATE_UPLOAD_TOKEN_PATH: "/api/create-user-upload-token";
    def CHECK_UPLOAD_TOKEN_PATH: "/api/check-user-upload-token";
    def UPLOAD_PROJECT_PATH: "/api/upload-project";

    def myWorkDir: String;
    def projectName: String;

    func getUploadToken(): String {
        def authKey: String;
        def settingsFilePath: String = myWorkDir + String("/.deploy.settings");
        if Fs.exists(settingsFilePath) {
            authKey = Fs.readFile(settingsFilePath);
            def request: Net.Request(String(HOST) +String(CHECK_UPLOAD_TOKEN_PATH));
            request.authKey = authKey
            request.post("check-user-upload-token");
            if request.responseHttpStatus == 200 {
            	return authKey;
            }
            else{
		Console.print("\nerror in auth key !\n");
                Fs.remove(settingsFilePath);
	    }
        }
        def userName: array[Char, 100];
        def authToken: array[Char, 100];
        Console.print("Enter username: \n>");
        Console.getString(userName~ptr, 100);
        Console.print("Enter password: \n>");
        Console.getString(authToken~ptr, 100);
	def fp : ptr[Fs.File];
	fp = Fs.openFile(settingsFilePath,"w");
        while 1 {
            def request: Net.Request(String(HOST ) + String(CREATE_UPLOAD_TOKEN_PATH));
            request.authKey = String(userName~ptr) + String(":") + authToken~ptr + String(":") + projectName;
            request.post("new"); 
	    Fs.write(request.responseBody,char~size,request.responseBody.getLength(),fp);
	    Fs.closeFile(fp);
            if request.responseHttpStatus == 200 {
                authKey = Fs.readFile(settingsFilePath);
                if authKey.split(":").getLength() == 3 {
                    break;
                } else if authKey.split("&&&&&").getLength() == 2 {
                    Console.print(
                        "Please setup your payment profile by visiting this URL:\n%s\nPress enter when you're done.\n",
                        authKey.split("&&&&&")(1).buf
                    );
                    Console.getChar();
                } else {
                    Console.print("Unexpected error! Please try again.\n");
                }
            } else if request.responseHttpStatus == 401 {
                Console.print("Authentication error. Invalid username or password.\n");
                Console.print("Enter username: \n>");
                Console.getString(userName~ptr, 100);
                Console.print("Enter password: \n>");
                Console.getString(authToken~ptr, 100);
            } else {
                Console.print("Unexpected error! Please try again.\n");
            }
        }
        return authKey;
    }

    func uploadProject(authKey: String) {
        def order: String = "alusus main.alusus build";
        System.exec(order);
        order = String.format("mv Build ") + projectName;
        System.exec(order);
        def tarFilename: String;
        tarFilename = projectName + String(".tar.gz");
        order = String("tar cvzf  ") + tarFilename + "  -C " + myWorkDir + " " + projectName;
        System.exec(order);
        def status: String = "new";
        while 1 {
            def request: Net.Request(String(HOST)+ String(UPLOAD_PROJECT_PATH));
            request.authKey = authKey + ":" + status;
            request.putFile(tarFilename);
            if request.responseHttpStatus == 200 {
                Console.print("Deployment successful.\n%s\n", request.responseBody.buf);
                break;
            } else if request.responseHttpStatus == 400 {
                Console.print("Upload failed. File is too big!\n");
                break;
            } else if request.responseHttpStatus == 409 {
                Console.print("Project already exists. Do you want to update it?\nEnter Y/y to update: \n>");
                def answer: array[Char, 2];
                Console.getString(answer~ptr, 2);
                if String.isEqual(answer~ptr, "y") or String.isEqual(answer~ptr, "Y") {
                    status = "old";
                } else {
                    break;
                }
            } else {
                Console.print("Unexpected error! Retry?\n");
                def answer: array[Char, 2];
                Console.getString(answer~ptr, 2);
                if not String.isEqual(answer~ptr, "y") and not String.isEqual(answer~ptr, "Y") {
                    break;
                }
            }
        }
        Fs.remove(tarFilename);
    }

    func publish() {
        def fp: ptr[Fs.File] = Fs.openProcess("pwd", "r");
        def path: array[char, 1035];
        Fs.readLine(path~ptr, 1035, fp);
        Fs.closeProcess(fp);
        myWorkDir = String(path~ptr);
	//remove the \n in the end of string
        myWorkDir=myWorkDir.slice(0,myWorkDir.getLength()-1);
        myWorkDir.split("/").{ projectName = this(this.getLength() - 1) };
        uploadProject(getUploadToken());
    }
}

Nashir.publish();
