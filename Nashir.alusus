import "Srl/Net.alusus";
import "Srl/Console.alusus";
import "Srl/System.alusus";
import "Srl/Fs.alusus";
import "Build";
import "Apm";
Apm.importFile("Alusus/ExtendedNet");
Apm.importFile("Alusus/Json");
Apm.importFile("Alusus/Crypto");
Apm.importFile("Alusus/I18n");

module Nashir {
    use Srl;
    def HOST: "https://madeef.ngrok.io";
    def CREATE_UPLOAD_TOKEN_PATH: "/api/upload-token";
    def GET_PROJECT_STATUS_PATH: "/api/project/setup-status";
    def SETUP_PROJECT_PATH: "/api/project/setup";
    def UPLOAD_PROJECT_PATH: "/api/project/upload";

    def verbose: Bool(false);
    def myWorkDir: String;
    def projectName: String;
    def settingsFilePath: String;

    macro handleUnexpectedCommunicationError {
        Console.print(I18n.string("Unexpected communication error! Retry?\n"));
        if getUserYesNoAnswer() != "yes" {
            System.exit(1);
        }
    }

    macro handle401Error {
        Console.print(I18n.string("\nExisting auth key is no longer valid. Requesting a new auth key.\n"));
        Fs.remove(settingsFilePath);
        authKey = getUploadToken();
    }

    func getUserYesNoAnswer(): String {
        def ret: String;
        while 1 {
            def answer: array[Char, 100];
            Console.getString(answer~ptr, 100);
            ret = I18n.string(answer~ptr).toLowerCase();
            if ret == "y" ret = "yes";
            if ret == "n" ret = "no";
            if ret == "yes" or ret == "no" break;
        }
        return ret;
    }

    func getUploadToken(): String {
        def authKey: String;
        if Fs.exists(settingsFilePath) {
            return Fs.readFile(settingsFilePath);
        }
        def userName: array[Char, 100];
        def password: array[Char, 100];
        macro promptForUserCredentials {
            Console.print(I18n.string("Enter username: \n>"));
            Console.getString(userName~ptr, 100);
            Console.print(I18n.string("Enter password: \n>"));
            Console.getString(password~ptr, 100);
        }
        promptForUserCredentials[];
        while 1 {
            def request: Net.Request(String(HOST) + CREATE_UPLOAD_TOKEN_PATH);
            request.verbose = verbose;
            request.authType = "Basic";
            request.authKey = Crypto.encodeBase64(String(userName~ptr) + ":" + password~ptr);
            request.post(String.format(
                "{\"name\": \"%s\", \"validity\": \"30\"}",
                Json.escape(projectName).buf
            ));
            if request.responseHttpStatus == 201 {
                authKey = Json(request.responseBody)("token");
                Fs.createFile(settingsFilePath, authKey, authKey.getLength());
                break;
            } else if request.responseHttpStatus == 401 {
                Console.print(I18n.string("Authentication error. Invalid username or password.\n"));
                promptForUserCredentials[];
            } else {
                handleUnexpectedCommunicationError[];
            }
        }
        return authKey;
    }

    func setupProject(authKey: String) {
        def status: String;
        while 1 {
            def request: Net.Request(String.format(
                "%s%s?project=%s", HOST, GET_PROJECT_STATUS_PATH, Net.uriEncode(projectName).buf
            ));
            request.verbose = verbose;
            request.authType = "Bearer";
            request.authKey = authKey;
            request.get();
            if request.responseHttpStatus == 200 {
                status = request.responseBody;
                break;
            } else if request.responseHttpStatus == 401 {
                handle401Error[];
            } else {
                handleUnexpectedCommunicationError[];
            }
        }
        if status == "active" {
            Console.print(
                I18n.string("Existing project with the same name exists. The project will be overwritten. Continue?\n")
            );
        } else if status == "inactive" {
            Console.print(I18n.string(
                "Existing, but inactive, project with the same name exists. "
                "The project will be re-activated and overwritten. Continue?\n"
            ));
        } else {
            Console.print(
                I18n.string("No existing project found with the same name. New project will be created. Continue?\n")
            );
        }
        if getUserYesNoAnswer() != "yes" {
            System.exit(1);
        }
        while 1 {
            def request: Net.Request(String.format(
                "%s%s?project=%s", HOST, SETUP_PROJECT_PATH, Net.uriEncode(projectName).buf
            ));
            request.verbose = verbose;
            request.authType = "Bearer";
            request.authKey = authKey;
            request.post("");
            if request.responseHttpStatus == 200 {
                break;
            } else if request.responseHttpStatus == 402 {
                Console.print(
                    I18n.string(
                        "Please setup your payment profile by visiting this URL:\n%s\nPress enter when you're done.\n"
                    ),
                    request.responseBody.buf
                );
                Console.getChar();
            } else if request.responseHttpStatus == 401 {
                handle401Error[];
            } else {
                handleUnexpectedCommunicationError[];
            }
        }
    }

    func uploadProject(authKey: String) {
        def order: String = String("rm -rf ") + projectName;
        System.exec(order);
        order = String("mv Build ") + projectName;
        System.exec(order);
        def tarFilename: String;
        tarFilename = projectName + String(".tar.gz");
        order = String("tar cvzf  ") + tarFilename + "  -C " + myWorkDir + " " + projectName;
        System.exec(order);
        while 1 {
            def request: Net.Request(String.format(
                "%s%s?project=%s", HOST, UPLOAD_PROJECT_PATH, Net.uriEncode(projectName).buf
            ));
            request.verbose = verbose;
            request.authKey = authKey;
            request.authType = "Bearer";
            request.putFile(tarFilename);
            if request.responseHttpStatus == 200 {
                Console.print(I18n.string("Deployment successful.\n%s\n"), request.responseBody.buf);
                break;
            } else if request.responseHttpStatus == 400 {
                Console.print(I18n.string("Upload failed. File is too big!\n"));
                break;
            } else if request.responseHttpStatus == 404 {
                Console.print(I18n.string("Unexpected error. Try re-starting the deployment.\n"));
                System.exit(1);
            } else if request.responseHttpStatus == 401 {
                handle401Error[];
            } else {
                handleUnexpectedCommunicationError[];
            }
        }
        Fs.remove(tarFilename);
    }

    func publish() {
        def fp: ptr[Fs.File] = Fs.openProcess("pwd", "r");
        def path: array[char, 1035];
        Fs.readLine(path~ptr, 1035, fp);
        Fs.closeProcess(fp);
        myWorkDir = String(path~ptr);
        // Remove the \n from the end of the string.
        myWorkDir = myWorkDir.slice(0, myWorkDir.getLength() - 1);
        myWorkDir.split("/").{ projectName = this(this.getLength() - 1) };
        settingsFilePath = myWorkDir + String("/.deploy.settings");
        def authToken: String = getUploadToken();
        setupProject(authToken);
        uploadProject(authToken);
    }

    func build [start: ast_ref] (assets: Array[String], deps: Array[String]) {
        def i: Int;
        for i = 0, i < assets.getLength(), ++i {
            System.exec(String.format("cp -r %s Build/", assets(i).buf));
        }
        def exe: Build.Exe(start~ast، String("Build/start"));
        exe.addDependencies(deps);
        if exe.generate() {
            Console.print(I18n.string("Build complete.\n"));
        } else {
            System.fail(1، "Build failed.");
        }
    }

    macro initialize {
        Srl.System.exec("mkdir -p Build");
        Srl.System.exec("rm -rf Build/*");
        WebPlatform.mainAssetsPath = "Build/Assets/";
        WebPlatform.uiEndpointsPath = "Build/UiEndpoints/";
    }

    macro startup[startExe, startJit, assets, deps] {
        if Process.argCount == 3 {
            def arg: CharsPtr = Process.args~cnt(Process.argCount - 1);
            if I18n.string(arg) == "build" {
                Nashir.build[startExe](assets, deps);
            } else if I18n.string(arg) == "publish" {
                Nashir.build[startExe](assets, deps);
                Nashir.publish();
            } else {
                Console.print(I18n.string(
                    "Error: Invalid argument\n"
                    "Usage:\n"
                    "  alusus <main_alusus_file> [build|publish]\n"
                ));
            }
        } else {
            startJit();
        }
    }

    macro startup[start, assets, deps] {
        @expname[main]
        func _main (argCount: Int، args: ptr[array[CharsPtr]]): Int {
            mainAssetsPath = "Assets/";
            uiEndpointsPath = "UiEndpoints/";

            start();
            return 0;
        }

        Nashir.startup[_main, start, assets, deps];
    }
}
