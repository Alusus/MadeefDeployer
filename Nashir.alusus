import "Srl/Net.alusus";
import "Srl/Console.alusus";
import "Srl/System.alusus";
import "Srl/Fs.alusus";
import "Apm";
Apm.importFile("Alusus/ExtendedNet");
use Srl;

module Nashir {
    def HOST: "http://localhost:8010";
    def CREATE_UPLOAD_TOKEN_PATH: "/api/upload-token";
    def GET_PROJECT_STATUS_PATH: "/api/project/setup-status";
    def SETUP_PROJECT_PATH: "/api/project/setup";
    def UPLOAD_PROJECT_PATH: "/api/project/upload";

    def myWorkDir: String;
    def projectName: String;
    def settingsFilePath: String;

    macro handleUnexpectedCommunicationError {
        Console.print("Unexpected communication error! Retry?\n");
        def answer: array[Char, 2];
        Console.getString(answer~ptr, 2);
        if not String.isEqual(answer~ptr, "y") and not String.isEqual(answer~ptr, "Y") {
            System.exit(1);
        }
    }

    macro handle401Error {
        Console.print("\nExisting auth key is no longer valid. Requesting a new auth key.\n");
        Fs.remove(settingsFilePath);
        authKey = getUploadToken();
    }

    func getUploadToken(): String {
        def authKey: String;
        if Fs.exists(settingsFilePath) {
            return Fs.readFile(settingsFilePath);
        }
        def userName: array[Char, 100];
        def password: array[Char, 100];
        macro promptForUserCredentials {
            Console.print("Enter username: \n>");
            Console.getString(userName~ptr, 100);
            Console.print("Enter password: \n>");
            Console.getString(password~ptr, 100);
        }
        promptForUserCredentials[];
        while 1 {
            def request: Net.Request(String(HOST) + CREATE_UPLOAD_TOKEN_PATH);
            request.authType = "Basic";
            request.authKey = String(userName~ptr) + ":" + password~ptr;
            request.post(String.format(
                "{\"name\": \"%s\", \"validity\": \"30\"}",
                Json.encode(projectName).buf
            ));
            if request.responseHttpStatus == 200 {
                authKey = Json(request.responseBody)("token");
                Fs.createFile(settingsFilePath, authKey, authKey.getLength());
                break;
            } else if request.responseHttpStatus == 401 {
                Console.print("Authentication error. Invalid username or password.\n");
                promptForUserCredentials[];
            } else {
                handleUnexpectedCommunicationError[];
            }
        }
        return authKey;
    }

    func setupProject(authkey: String) {
        def status: String;
        while 1 {
            def request: Net.Request(String.format(
                "%s%s?project=%s", HOST, GET_PROJECT_STATUS_PATH, Net.uriEncode(projectName).buf
            ));
            request.authType = "Bearer";
            request.authKey = authKey;
            request.get();
            if request.responseHttpStatus == 200 {
                status = request.responseBody;
                break;
            } else if request.responseHttpStatus == 401 {
                handle401Error[];
            } else {
                handleUnexpectedCommunicationError[];
            }
        }
        if status == "active" {
            Console.print("Existing project with the same name exists. The project will be overwritten. Continue?\n");
        } else if status == "inactive" {
            Console.print(
                "Existing, but inactive, project with the same name exists. "
                "The project will be re-activated and overwritten. Continue?\n"
            );
        } else {
            Console.print("No existing project found with the same name. New project will be created. Continue?\n");
        }
        def answer: array[Char, 2];
        Console.getString(answer~ptr, 2);
        if not String.isEqual(answer~ptr, "y") and not String.isEqual(answer~ptr, "Y") {
            System.exit(1);
        }
        while 1 {
            def request: Net.Request(String.format(
                "%s%s?project=%s", HOST, SETUP_PROJECT_PATH, Net.uriEncode(projectName).buf
            ));
            request.authType = "Bearer";
            request.authKey = authKey;
            request.post("");
            if request.responseHttpStatus == 200 {
                break;
            } else if request.responseHttpStatus == 402 {
                Console.print(
                    "Please setup your payment profile by visiting this URL:\n%s\nPress enter when you're done.\n",
                    request.responseBody.buf
                );
                Console.getChar();
            } else if request.responseHttpStatus == 401 {
                handle401Error[];
            } else {
                handleUnexpectedCommunicationError[];
            }
        }
    }

    func uploadProject(authKey: String) {
        def order: String = "alusus main.alusus build";
        System.exec(order);
        order = String.format("mv Build ") + projectName;
        System.exec(order);
        def tarFilename: String;
        tarFilename = projectName + String(".tar.gz");
        order = String("tar cvzf  ") + tarFilename + "  -C " + myWorkDir + " " + projectName;
        System.exec(order);
        while 1 {
            def request: Net.Request(String.format(
                "%s%s?project=%s", HOST, UPLOAD_PROJECT_PATH, Net.uriEncode(projectName).buf
            ));
            request.authKey = authKey;
            request.authType = "Bearer";
            request.putFile(tarFilename);
            if request.responseHttpStatus == 200 {
                Console.print("Deployment successful.\n%s\n", request.responseBody.buf);
                break;
            } else if request.responseHttpStatus == 400 {
                Console.print("Upload failed. File is too big!\n");
                break;
            } else if request.responseHttpStatus == 404 {
                Console.print("Unexpected error. Try re-starting the deployment.\n>");
                System.exit(1);
            } else if request.responseHttpStatus == 401 {
                handle401Errorp[];
            } else {
                handleUnexpectedCommunicationError[];
            }
        }
        Fs.remove(tarFilename);
    }

    func publish() {
        def fp: ptr[Fs.File] = Fs.openProcess("pwd", "r");
        def path: array[char, 1035];
        Fs.readLine(path~ptr, 1035, fp);
        Fs.closeProcess(fp);
        myWorkDir = String(path~ptr);
        // Remove the \n from the end of the string.
        myWorkDir = myWorkDir.slice(0, myWorkDir.getLength() - 1);
        myWorkDir.split("/").{ projectName = this(this.getLength() - 1) };
        settingsFilePath = myWorkDir + String("/.deploy.settings");
        def authToken: String = getUploadToken();
        setupProject(authToken);
        uploadProject(authToken);
    }
}

Nashir.publish();
